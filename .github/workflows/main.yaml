##
## This workflow handles testing of pull requests and pushes.
## It also publishes some packages to any new Erlang/OTP release
##
## To speed this up it would be nice if one could share docker
## images inbetween different jobs, but at the moment this is
## not possible so we need to rebuild all of Erlang/OTP multiple
## times.
##
## Now that we have migrated to ghcr.io we use the
## built-in caching mechanisms of docker/build-push-action@v2.
## However as things are now we use docker directly to make things
## work due to historical reasons.
##

name: Build and check Erlang/OTP

on:
  push:
  pull_request:

env:
    ## Equivalent to github.event_name == 'pull_request' ? github.base_ref : github.ref_name
    BASE_BRANCH: ${{ github.event_name == 'pull_request' && github.base_ref || github.ref_name }}

jobs:

  pack:
    name: Build Erlang/OTP (64-bit)
    runs-on: ubuntu-latest
    outputs:
        BASE_BUILD: ${{ steps.base-build.outputs.BASE_BUILD }}
        changes: ${{ steps.changes.outputs.changes }}
        all: ${{ steps.apps.outputs.all }}
    steps:
      - uses: actions/checkout@v3
      - name: Get applications
        id: apps
        run: |
          .github/scripts/path-filters.sh > .github/scripts/path-filters.yaml
          ALL_APPS=$(grep '^[a-z_]*:' .github/scripts/path-filters.yaml | sed 's/:.*$//')
          ALL_APPS=$(jq -n --arg inarr "${ALL_APPS}" '$inarr | split("\n")' | tr '\n' ' ')
          echo "all=${ALL_APPS}" >> $GITHUB_OUTPUT
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/scripts/path-filters.yaml
      - name: Create initial pre-release tar
        run: .github/scripts/init-pre-release.sh otp_archive.tar.gz
      - name: Upload source tar archive
        uses: actions/upload-artifact@v3
        with:
          name: otp_git_archive
          path: otp_archive.tar.gz
      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache BASE image
        uses: actions/cache@v3
        with:
            path: otp_docker_base.tar
            key: ${{ runner.os }}-${{ hashFiles('.github/dockerfiles/Dockerfile.ubuntu-base', '.github/scripts/build-base-image.sh') }}
      - name: Build BASE image
        run: .github/scripts/build-base-image.sh "${BASE_BRANCH}" 64-bit
      - name: Cache pre-built tar archives
        id: pre-built-cache
        uses: actions/cache@v3
        with:
            path: |
                otp_src.tar.gz
                otp_cache.tar.gz
            key: prebuilt-${{ github.ref_name }}-${{ github.sha }}
            restore-keys: |
                prebuilt-${{ github.base_ref }}-${{ github.event.pull_request.base.sha }}
      - uses: dorny/paths-filter@v2
        id: cache
        with:
          filters: |
              no-cache:
                  - '.github/**'
              deleted:
                  - deleted: '**'
              bootstrap:
                  - 'bootstrap/**'
              configure:
                  - '**.ac'
                  - '**.in'
          list-files: shell
      - name: Restore from cache
        env:
            NO_CACHE: ${{ steps.cache.outputs.no-cache }}
            BOOTSTRAP: ${{ steps.cache.outputs.bootstrap }}
            CONFIGURE: ${{ steps.cache.outputs.configure }}
        run: |
            .github/scripts/restore-from-prebuilt.sh "`pwd`" \
              "`pwd`/.github/otp.tar.gz" \
              "`pwd`/otp_archive.tar.gz" \
              '${{ github.event_name }}' \
              '${{ steps.cache.outputs.deleted_files }}' \
              '${{ steps.changes.outputs.changes }}'
      - name: Upload restored cache
        uses: actions/upload-artifact@v3
        if: runner.debug == 1
        with:
          name: restored-cache
          path: .github/otp.tar.gz
      - name: Build image
        run: |
          docker build --tag otp \
            --build-arg MAKEFLAGS=-j$(($(nproc) + 2)) \
            --file ".github/dockerfiles/Dockerfile.64-bit" \
            .github/
      - name: Build pre-built tar archives
        run: |
          docker run -v $PWD:/github --entrypoint "" otp \
            scripts/build-otp-tar -o /github/otp_clean_src.tar.gz /github/otp_src.tar.gz -b /buildroot/otp/ /github/otp_src.tar.gz
      - name: Build cache
        run: |
          if [ -f otp_cache.tar.gz ]; then
            gunzip otp_cache.tar.gz
          else
            docker run -v $PWD:/github --entrypoint "" otp \
              bash -c 'cp ../otp_cache.tar /github/'
          fi
          docker run -v $PWD:/github --entrypoint "" otp \
            bash -c 'set -x; C_APPS=$(ls -d ./lib/*/c_src); find Makefile ./make ./erts ./bin/`erts/autoconf/config.guess` ./lib/erl_interface ./lib/jinterface ${C_APPS} `echo "${C_APPS}" | sed -e 's:c_src$:priv:'` -type f -newer README.md \! -name "*.beam" \! -path "*/doc/*" | xargs tar --transform "s:^./:otp/:" -uvf /github/otp_cache.tar'
          gzip otp_cache.tar
      - name: Upload pre-built tar archive
        uses: actions/upload-artifact@v3
        with:
          name: otp_prebuilt
          path: |
              otp_src.tar.gz
              otp_cache.tar.gz

  build-macos:
    name: Build Erlang/OTP (macOS)
    runs-on: macos-12
    needs: pack
    env:
      WXWIDGETS_VERSION: 3.1.5
    steps:
      - uses: actions/checkout@v3

      - name: Download source archive
        uses: actions/download-artifact@v3
        with:
          name: otp_prebuilt

      - name: Cache wxWidgets
        id: wxwidgets-cache
        uses: actions/cache@v3
        with:
          path: wxWidgets
          key: wxWidgets-${{ env.WXWIDGETS_VERSION }}-${{ runner.os }}-12

      - name: Compile wxWidgets
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        run: .github/scripts/build-macos-wxwidgets.sh

      - name: Compile Erlang
        run: |
          export V=1
          tar -xzf ./otp_src.tar.gz
          export PATH=$PWD/wxWidgets/release/bin:$PATH
          cd otp
          $GITHUB_WORKSPACE/.github/scripts/build-macos.sh build_docs --disable-dynamic-ssl-lib
          tar -czf otp_macos_$(cat OTP_VERSION)_x86-64.tar.gz -C release .
          cd ..
          tar -czvf build.tar.gz otp

      - name: Test Erlang
        run: |
          cd otp/release
          ./Install -sasl $PWD
          ./bin/erl -noshell -eval 'io:format("~s", [erlang:system_info(system_version)]), halt().'
          ./bin/erl -noshell -eval 'ok = crypto:start(), io:format("crypto ok~n"), halt().'
          ./bin/erl -noshell -eval '{wx_ref,_,_,_} = wx:new(), io:format("wx ok~n"), halt().'

      - name: Upload tarball
        uses: actions/upload-artifact@v3
        with:
          name: otp_prebuilt_macos_x86-64
          path: otp/otp_macos_*_x86-64.tar.gz

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: erlang-otp-26-macos-build
          path: build.tar.gz

  build-ios:
    env:
      RELEASE_LIBBEAM: yes
      TARGET_ARCH: aarch64-apple-ios
    name: Build Erlang/OTP (iOS)
    runs-on: macos-12
    needs: pack
    steps:
      - uses: actions/checkout@v3
      - name: Download source archive
        uses: actions/download-artifact@v3
        with:
          name: otp_prebuilt

      - name: Compile Erlang
        run: |
          export V=1
          tar -xzf ./otp_src.tar.gz
          cd otp
          $GITHUB_WORKSPACE/.github/scripts/build-macos.sh --xcomp-conf=./xcomp/erl-xcomp-arm64-ios.conf --without-ssl
          cd ..
          tar -czvf build.tar.gz otp

      - name: Package .xcframework
        run: |
          cd otp
          export BUILD_ARCH=`./erts/autoconf/config.guess`
          export LIBS=`find . -not -path "*${BUILD_ARCH}*" -path "*${TARGET_ARCH}*" -not -name "*_st.a" -not -name "*_r.a" -name "*.a" | awk '{ "basename " $1 | getline name; names[name] = $1 } END { for (n in names) { print names[n] }}'`
          libtool -static -o liberlang.a $LIBS
          xcodebuild -create-xcframework -output ./liberlang.xcframework -library liberlang.a

      - name: Upload framework
        uses: actions/upload-artifact@v3
        with:
          name: ios_framework_${{ env.TARGET_ARCH }}
          path: otp/liberlang.xcframework

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: erlang-otp-26-ios-build
          path: build.tar.gz

  build-windows:
    defaults:
      run:
        shell: wsl-bash {0}
    env:
      WXWIDGETS_VERSION: 3.1.4
    name: Build Erlang/OTP (Windows)
    runs-on: windows-2022
    needs: pack
    steps:
      - uses: Vampire/setup-wsl@v2
        with:
          distribution: Ubuntu-18.04

      - name: Install WSL dependencies
        run: apt update && apt install -y g++-mingw-w64 gcc-mingw-w64 make autoconf unzip

      - name: Install openssl
        shell: cmd
        run: |
          choco install openssl
          move "c:\\Program Files\\OpenSSL" "c:\\OpenSSL-Win64"

      - name: Cache wxWidgets
        uses: actions/cache@v3
        with:
          path: wxWidgets
          key: wxWidgets-${{ env.WXWIDGETS_VERSION }}-${{ runner.os }}

      # actions/cache on Windows sometimes does not set cache-hit even though there was one. Setting it manually.
      - name: Set wxWidgets cache
        id: wxwidgets-cache
        env:
          WSLENV: GITHUB_OUTPUT/p
        run: |
          if [ -d wxWidgets ]; then
            echo "cache-hit=true" >> $GITHUB_OUTPUT
          else
            echo "cache-hit=false" >> $GITHUB_OUTPUT
          fi

      - name: Download wxWidgets
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v${{ env.WXWIDGETS_VERSION }}/wxWidgets-${{ env.WXWIDGETS_VERSION }}.zip
          unzip wxWidgets-${{ env.WXWIDGETS_VERSION }}.zip -d wxWidgets
          sed -i -r -e 's/wxUSE_POSTSCRIPT +0/wxUSE_POSTSCRIPT 1/' wxWidgets/include/wx/msw/setup.h
          sed -i -r -e 's/wxUSE_WEBVIEW_EDGE +0/wxUSE_WEBVIEW_EDGE 1/' wxWidgets/include/wx/msw/setup.h

      - name: Install WebView2
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd wxWidgets\\3rdparty
          nuget install Microsoft.Web.WebView2 -Version 1.0.705.50 -Source https://api.nuget.org/v3/index.json
          rename Microsoft.Web.WebView2.1.0.705.50 webview2

      - name: Build wxWidgets
        if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd wxWidgets\\build\\msw
          call "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\Auxiliary\\Build\\vcvars64.bat"
          nmake TARGET_CPU=amd64 BUILD=release SHARED=0 DIR_SUFFIX_CPU= -f makefile.vc

      - name: Download source archive
        uses: actions/download-artifact@v3
        with:
          name: otp_prebuilt

      - name: Compile Erlang
        run: |
          export V=1
          mkdir -p /mnt/c/opt/local64/pgm/
          cp -R wxWidgets /mnt/c/opt/local64/pgm/wxWidgets-${{ env.WXWIDGETS_VERSION }}
          tar -xzf ./otp_src.tar.gz
          cd otp
          export ERL_TOP=`pwd`
          export MAKEFLAGS=-j$(($(nproc) + 2))
          export ERLC_USE_SERVER=true
          export ERTS_SKIP_DEPEND=true
          eval `./otp_build env_win32 x64`
          ./otp_build configure
          if cat erts/CONF_INFO || cat lib/*/CONF_INFO || cat lib/*/SKIP || cat lib/SKIP-APPLICATIONS; then exit 1; fi
          ./otp_build boot -a
          ./otp_build release -a
          cp /mnt/c/opt/local64/pgm/wxWidgets-${{ env.WXWIDGETS_VERSION }}/3rdparty/webview2/runtimes/win-x64/native/WebView2Loader.dll $ERL_TOP/release/win32/erts-*/bin/
          ./otp_build installer_win32
          cd ..
          tar -czvf build.tar.gz otp

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: erlang-otp-26-windows-build
          path: build.tar.gz

      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: otp_win32_installer
          path: otp/release/win32/otp*.exe

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}
